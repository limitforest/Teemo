/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ciotc.teemo.menu;

import static com.ciotc.teemo.resource.MyResources.getResourceString;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Properties;

import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Linxiaozhi
 */
public class LanguagePanel extends JPanel {
	public static final String RESTART = "restart";

	//private MainFrame mainFrame = null;
	//HashMap<String,String> maps = new HashMap<String, String>();
//	/**
//	 * 根据语言来构造相应的字符串
//	 * @param in 0 1 为中文  2为英文 3为俄文 
//	 */
//	private void constructHashMap(){
//		maps.clear();
//		/*if(in == 0){
//			maps.put("ok", "确定");
//			maps.put("cancel", "取消");
//			maps.put("title","语言选择");
//			maps.put("tips","选择一种语言,然后重启程序。");
//		}else if(in == 1){
//			maps.put("ok", "ok");
//			maps.put("cancel", "cancel");
//			maps.put("title","select language");
//			maps.put("tips","Select the language,and restart the application.");
//		}else if(in == 2){
//			maps.put("ok", "оК");
//			maps.put("cancel", "<html>отменить</html>");
//			maps.put("title","выбрать язык");
//			maps.put("tips","<html>Выберите язык,<br> и перезапустить приложение.</html>");
//		}else{ //其他的用英文来代替
//			maps.put("ok", "ok");
//			maps.put("cancel", "cancel");
//			maps.put("title","title");
//			maps.put("tips","Select the language,and restart the application.");
//		}*/
//		maps.put("ok",getResourceString("ok"));
//		maps.put("cancel", getResourceString("cancel"));
//		maps.put("title",getResourceString("SelectLanguageFrame.title"));
//		maps.put("tips",getResourceString("SelectLanguageFrame.tips"));
//		
//	}

//	public void setMainFrame(MainFrame mainFrame) {
//		this.mainFrame = mainFrame;
//	}

//	/**
//	 * 给各个控件文本设值
//	 */
//	private void setTextByMaps(){
//		 jLabel1.setText(maps.get("tips"));
//		 cancel.setText(maps.get("cancel"));
//		 ok.setText(maps.get("ok"));
//		 setTitle(maps.get("title"));
//	}

	static String fileName = "config\\language.properties";

	//int selection  = 0;
	public void save(String language, String country) {
		Properties prop = new Properties();
		try {

			FileReader fr = null;
			try {
				fr = new FileReader(fileName);
			} catch (FileNotFoundException e) {
				e.printStackTrace();
				//找不到就创建一个
				File f = new File(fileName);
				fr = new FileReader(f);
			}
			prop.load(fr);
			prop.setProperty("language", language);
			prop.setProperty("country", country);
			prop.store(new FileWriter(fileName), null);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 根据配置文件得到语言
	 * @return 返回语言的索引
	 */
	private static int loadLanguageProperty() {
		Properties prop = new Properties();
		try {
			prop.load(new FileReader(fileName));
			String language = prop.getProperty("language");
			String country = prop.getProperty("country");
			if (language.equals("zh") && country.equals("CN"))
				return 0;
			if (language.equals("en") && country.equals("US"))
				return 1;
			if (language.equals("ru") && country.equals("RU"))
				return 2;
		} catch (IOException e) {
			e.printStackTrace();
		}
		return -1;
	}

	private static int originSelection = loadLanguageProperty();

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * Creates new form NewJFrame
	 */
	public LanguagePanel() {
		//constructHashMap();
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {
		jComboBox1 = new javax.swing.JComboBox();
		jLabel1 = new javax.swing.JLabel();

		jLabel1.setText(getResourceString("SelectLanguageFrame.tips"));

		setLayout(null);

		add(jLabel1);
		jLabel1.setBounds(10, 0, 320, 60);
		jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "中文", "English", "русский" }));
		add(jComboBox1);
		jComboBox1.setBounds(10, 70, 300, 21);

		load();

		// add(cancel);
		//  cancel.setBounds(172, 117, 113, 23);

//	        jComboBox1.addItemListener(new ItemListener() {
//			
//			@Override
//			public void itemStateChanged(ItemEvent e) {
//				/*if(e.getStateChange() == ItemEvent.SELECTED){
//					int in = jComboBox1.getSelectedIndex();
//				}*/
//			}
//		});

//	        ok.addActionListener(new ActionListener() {
//
//			@Override
//			public void actionPerformed(ActionEvent e) {
//				selection = jComboBox1.getSelectedIndex();
//				switch (selection) {
//				case 0: //中文
//					save("zh","CN");
//					break;
//				case 1: //英文
//					save("en","US");
//					break;
//				case 2: //饿文
//					save("ru","RU");
//					break;
//				default:
//					break;
//				}
//				//System.exit(0);
//				int result = JOptionPane.showConfirmDialog(null, getResourceString("SelectLanguageFrame.restart"), getResourceString("Teemo"), JOptionPane.YES_NO_OPTION);
//				if(result == JOptionPane.YES_OPTION){
//					//重启
//					ArrayList<String> commands = new ArrayList<String>();
//					//commands.add("java");
//					//commands.add("-jar");
//					//commands.add("teemo.jar");
//					//commands.add("notepad.exe");
//					//commands.add("teemo.exe");
//					//ProcessBuilder pb= new ProcessBuilder(commands);
//					//ProcessBuilder pb= new ProcessBuilder("cmd.exe /c start c:\\\"Program Files\"\\teemo\\teemo.exe");
//
//					//pb.directory(new File("d:\\teemo"));  
//					//pb.directory(new File("C:\\\"Program Files\"\\teemo")); 
//					//pb.directory(new File("myDir"));
//					
//					//??以下方法存在bug？
//					/*ProcessBuilder pb= new ProcessBuilder("C:/\"Program Files\"/teemo/teemo.exe");
//					
//					try {
//						Process p = pb.start();
//					} catch (IOException e1) {
//						// TODO Auto-generated catch block
//						e1.printStackTrace();
//					}*/
//					if(mainFrame!=null){
//						mainFrame.closeHandle();
//						mainFrame.dispose();
//						for(JInternalFrame jif :mainFrame.desktopPane.getAllFrames()){
//							jif.doDefaultCloseAction();
//						}
//					}
//					try {
//						//Runtime.getRuntime().exec("cmd.exe /c start teemo.exe");
//						ProcessBuilder pb= new ProcessBuilder("StartTeemo.exe");
//						Process p = pb.start();
//						System.exit(0);
//					} catch (IOException e1) {
//						// TODO Auto-generated catch block
//						JOptionPane.showMessageDialog(null,getResourceString("cannotRestart"), getResourceString("Teemo"), JOptionPane.ERROR_MESSAGE);
//						e1.printStackTrace();
//					}
//				}
//				//dispose();
//				
//			}
//		});

		//   setTextByMaps();

		//pack();
		//setSize(325,190);
		//setResizable(false);
		//setLocationRelativeTo(null);
		//setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
	}// </editor-fold>

	public void load() {
		jComboBox1.setSelectedIndex(loadLanguageProperty());
	}

	public void apply() {
		
		
		int selection = jComboBox1.getSelectedIndex();
		if(originSelection==selection) return;
		switch (selection) {
		case 0: //中文
			save("zh", "CN");
			break;
		case 1: //英文
			save("en", "US");
			break;
		case 2: //饿文
			save("ru", "RU");
			break;
		default:
			break;
		}
		int result = JOptionPane.showConfirmDialog(this, getResourceString("SelectLanguageFrame.restart"), getResourceString("Teemo"), JOptionPane.YES_NO_OPTION);
		if (result == JOptionPane.YES_OPTION) {
			firePropertyChange(RESTART, null, null);
		}
	}

	public void setDefault() {
		jComboBox1.setSelectedIndex(originSelection);
	}

	@SuppressWarnings("rawtypes")
	private javax.swing.JComboBox jComboBox1;
	private javax.swing.JLabel jLabel1;
	// End of variables declaration
}
